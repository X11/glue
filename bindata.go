// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\xc1\x6e\x83\x30\x10\x44\xef\xfb\x15\x23\xd4\x03\x54\x91\x73\xaf\x94\x43\x95\x53\x0f\x8d\xa2\xb4\x3f\xe0\x3a\x5b\x42\x0b\x06\x2d\xa6\x51\x14\xf1\xef\xd5\x2e\xa8\x21\xbd\xd9\xde\xd9\x37\x33\xd0\xf9\xf0\xed\x4b\xc6\xf5\x0a\xb7\x9f\xcf\xe3\x48\x54\x35\x5d\x2b\x09\x39\x01\x59\x59\xa5\xd3\xf0\xe1\x42\xdb\xac\x13\x7f\xf9\xbe\xf1\xb1\x3d\x79\x59\x97\xf5\xc0\xeb\x50\x57\x1c\x53\x46\x50\x84\xf8\x58\x32\xdc\x8b\x2d\xf7\x0a\x02\x80\x4c\xe1\x18\xc7\x59\xc4\xf1\xa8\x93\x82\xe8\x73\x88\x01\x3b\x3e\xeb\xfc\x8d\xe5\xa7\x0a\x6a\xbe\x35\x62\x2e\x5d\x98\x4e\x98\x2c\xdc\x74\x2b\xf0\x78\x2f\xc7\x95\x80\x80\xa7\x0d\x22\x9f\xf3\xfb\x59\xa1\x23\x77\xd8\x6f\xb1\xc1\x1f\x8f\x00\xe1\x34\x48\x44\xa0\x91\x28\x5d\xba\xa9\xfe\x02\xd9\x27\x19\x42\x32\xb2\x2e\xdf\x05\xd0\x9d\x5b\xd5\x57\x4e\xa7\xf6\x38\x57\xb5\x3e\x79\xb0\x84\x0f\xcb\x18\xc6\xdf\xf9\x46\x2f\xb9\x97\xb2\xb7\x87\x67\x29\xdf\xd5\x5c\x05\xb9\xb5\x3a\x70\x57\x5f\xe6\xb7\x15\x58\xa4\x95\xc2\x52\x68\xe4\xae\xbe\x2c\x5b\x2e\xb5\x85\x49\x58\x44\x05\x56\xd8\x6d\x7d\x5d\xe7\xd9\xbf\x20\x6e\x91\x23\x5b\x41\x93\xac\x26\x72\x31\x9b\xd8\x77\xb1\x17\xf3\x27\x60\xa4\xdb\x3f\xfb\x0d\x00\x00\xff\xff\xf3\x5f\xdf\xce\x2e\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 558, mode: os.FileMode(420), modTime: time.Unix(1495250010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

