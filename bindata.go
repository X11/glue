// Code generated by go-bindata.
// sources:
// templates/client.gohtml
// DO NOT EDIT!

package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesClientGohtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\x4d\x6a\xf3\x40\x0c\xdd\xeb\x14\x0f\xf3\x2d\x3c\x1f\xc1\x07\x28\x64\x51\xb2\xea\xa2\x21\xa4\xbd\xc0\x30\x51\x5c\x53\x67\x62\xe4\x49\x43\x30\x73\xf7\x22\x79\x68\x9c\xac\x6c\x4b\x4f\x7a\x3f\xf2\xe0\xc3\xb7\x6f\x19\xd3\x84\x66\x57\xde\x73\x26\xea\x4e\xc3\x59\x12\x6a\x82\xb6\xc4\xc7\x96\xd1\xbc\x59\x71\x54\x00\x00\x54\x3a\x84\x9c\xab\x19\xc4\xf1\xa0\x1d\x47\x94\x6e\x03\x63\xd3\x77\x1c\x13\xba\x98\x58\x8e\x3e\x30\x26\x1d\xda\xf8\xbe\xaf\x4f\x9c\xbe\xce\x07\x8c\x49\xba\xd8\xae\xe0\xa5\x1d\xef\xb8\x29\xaf\x20\x3c\xf4\xb7\x65\xc9\x81\x45\xce\x42\x99\xe8\x78\x89\x01\x5b\xbe\x2a\xf9\x07\xcb\x4f\x17\x54\xf1\xcc\x56\xcb\x10\x0a\xef\xfc\x70\xf8\xff\x88\x33\x15\x01\x2f\x6b\x44\xbe\xd6\x8f\x3d\xa7\xad\x66\xbf\xdb\x60\x8d\xbf\x45\x04\x08\xa7\x8b\x44\x04\x65\x37\x6b\x4f\x2b\xc7\x24\x97\x90\x6c\xb3\x0e\x97\xb9\x4c\x74\x4f\xee\xdd\x1c\x97\xe4\xcc\x41\x1d\x4c\xda\xbf\x25\xbf\x2d\xde\xfa\x93\x7e\xd4\x96\x8a\x16\x5e\xa5\xfd\x54\x56\x05\xd4\x66\x67\xaf\xf1\x94\xda\x6a\x4e\xc6\xcd\xf1\x96\xe4\x16\xf6\x96\x58\x67\x10\x16\x51\x80\x39\x6d\xec\x1e\xd5\x93\x90\x66\xa1\xa3\x9a\xef\x53\x6e\xe2\x0a\x89\x05\x62\x15\xe3\x27\x20\xd3\xfd\x17\xf8\x0d\x00\x00\xff\xff\xf6\x61\x36\xa7\x55\x02\x00\x00"

func templatesClientGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesClientGohtml,
		"templates/client.gohtml",
	)
}

func templatesClientGohtml() (*asset, error) {
	bytes, err := templatesClientGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/client.gohtml", size: 597, mode: os.FileMode(420), modTime: time.Unix(1493974824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client.gohtml": templatesClientGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"client.gohtml": &bintree{templatesClientGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

